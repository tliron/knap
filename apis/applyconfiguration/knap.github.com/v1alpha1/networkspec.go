// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// NetworkSpecApplyConfiguration represents an declarative configuration of the NetworkSpec type for use
// with apply.
type NetworkSpecApplyConfiguration struct {
	Provider *string           `json:"provider,omitempty"`
	Hints    map[string]string `json:"hints,omitempty"`
}

// NetworkSpecApplyConfiguration constructs an declarative configuration of the NetworkSpec type for use with
// apply.
func NetworkSpec() *NetworkSpecApplyConfiguration {
	return &NetworkSpecApplyConfiguration{}
}

// WithProvider sets the Provider field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Provider field is set to the value of the last call.
func (b *NetworkSpecApplyConfiguration) WithProvider(value string) *NetworkSpecApplyConfiguration {
	b.Provider = &value
	return b
}

// WithHints puts the entries into the Hints field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Hints field,
// overwriting an existing map entries in Hints field with the same key.
func (b *NetworkSpecApplyConfiguration) WithHints(entries map[string]string) *NetworkSpecApplyConfiguration {
	if b.Hints == nil && len(entries) > 0 {
		b.Hints = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Hints[k] = v
	}
	return b
}
